
Файл "2 lesson" содержит программу по второй лекции. Код в зависимости от ключа "method", проводит либо обучение линейного классификатора,
либо запоминает обучающую выборку для метода kNN, по данным файлов mnist_dataset/data_batch в которых хранятся различные написания чисел 
от 0 до 9, результатом выполнения программы является вероятность правильного определения числа из тестовой выборки. Работа линейного
классификатора обеспечивается функцией LogisticRegression, которая получает на вход массив картинок развернутых в вектор и соответствующие
картинкам цифры, на основе этих данных для каждого числа она строит "маску", представляющую собой набор весов, каждый вес отвечает за 
конкретный пиксель, чем значение веса больше тем вероятнее что цвет этого пикселя имеет решающее значение в написании данной цифры. Метод 
kNN на этапе обучения запоминает обучающую выборку, а на этапе тестирования производит сравнение данной цифры с цифрами из обучающей 
выборки, по результатам определяет наиболее похожий результат и на его основе делает вывод. В реализации данной программы, при 
используемых мной данных для обучения и тестирования, эти методы работают практически с одинаковой эффективностью, но на практике метод 
kNN не применяют для обработки изображений, по как он крайне не надежен, он не справляется с измененными в размерах и отраженными 
изображениями его результат зависит в основном от фона изображения, так как он занимает основную часть. Различие во времени работы этих 
методов следующее, kNN быстро обучается и долго проводит классификацию, линейный разделитель на против, медленно обучается, но быстро 
классифицирует.
